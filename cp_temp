//#define FILEIO
#include<bits/stdc++.h>
#include<boost/multiprecision/cpp_int.hpp>

using namespace std;
using cpp_int = boost::multiprecision::cpp_int;

const int64_t MODVAL = 1e9 + 7;

int64_t powermod(int64_t x, int64_t n, int64_t mod = MODVAL){
	if(n == 0){
		return 1;
	}
	else if(n % 2){
		return (x * powermod(x, n - 1, mod)) % mod; 
	}
	int64_t temp = powermod(x, n / 2, mod);
	return (temp * temp) % mod;
}
int64_t power(int64_t x, int64_t n){
	if(n == 0){
		return 1;
	}
	else if(n % 2){
		return (x * power(x, n - 1)); 
	}
	int64_t temp = power(x, n / 2);
	return (temp * temp);
}
map<int64_t, int64_t> modinv;
int64_t inv(int64_t n, int64_t mod = MODVAL){
	if(modinv[n] == 0){
		modinv[n] = powermod(n, mod - 2, mod);
	}
	return modinv[n];
}

int main(){
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	#ifdef FILEIO
	freopen("in", "r", stdin);
	freopen("out", "w", stdout);
	#endif
	
	return 0;
}
